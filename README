This repository contains a proof of concept implementation of an
executor service that supports running tasks that can be interrupted
more robustly. The problem we need to solve is that not all Java classes
and operations support interruption. Thus, tasks need to be helped, for
example by closing sockets that are in use and so on.

Here's what we do:

- We create CancellableCallable, which is a task that can be cancelled.

- We create FutureCancellableTask, which knows how to propagate the
  cancellation requests to the CancellableCallable it's connected with.
  
- We create CancellableExecutor, which not only supports the use of the
  above classes, but also keeps track of which tasks are running, and
  cancels them when shutdownNow() is now.
  

NOTE: This PoC implements a generic solution. However, another approach that
      is simpler, is to subclass Thread and override interrupt(), then do
      all the cancellation work there. No need to mess with the executors.
      
TIPS: Things you might wish to do to support more robust interruption:

      - In your code, periodically check for interruption and stop the task.

      - Close java.io and java.nio sockets.
      
      - Close selector blocked on Selector.select.
      
      - Don't use intrinsic locks, use Lock instead.
      
      - In your task, in the cancel() method implementation, set a
        flag and remember the cancellation. Elsewhere in your code where
        you maybe get exceptions that were caused by the cancellation,
        you can check this flag to detect this situation (and maybe
        throw an InterruptedException).
      